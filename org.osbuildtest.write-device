#!/usr/bin/python3
"""
Write to device

"""

import os
import subprocess
import sys
import fcntl
import struct

from urllib.parse import urlparse, ParseResult
from typing import Dict

import osbuild.api


SCHEMA_2 = """
"devices": {
  "type": "object",
  "additionalProperties": true,
  "required": ["device"],
  "properties": {
    "device": {
      "type": "object",
      "additionalProperties": true
    }
  }
},
"inputs": {
  "type": "object",
  "additionalProperties": true
},
"options": {
  "additionalProperties": false,
  "required": ["from"],
  "properties": {
    "from": {
      "type": "string",
      "description": "The source",
      "pattern": "^input:\/\/[^\/]+\/"
    }
  }
}
"""

def blksize(device_path):
    req = 0x80081272 # BLKGETSIZE64, result is bytes as unsigned 64-bit integer (uint64)
    buf = b' ' * 8
    fmt = 'L'

    with open(device_path) as dev:
        buf = fcntl.ioctl(dev.fileno(), req, buf)
    n_bytes = struct.unpack('L', buf)[0]
    return n_bytes

def parse_input(url: ParseResult, args: Dict):
    name = url.netloc
    root = args["inputs"].get(name, {}).get("path")
    if root is None:
        raise ValueError(f"Unknown input '{root}'")

    return root

def parse_location(location, args):
    url = urlparse(location)

    scheme = url.scheme
    if scheme == "input":
        root = parse_input(url, args)
    else:
        raise ValueError(f"Unsupported scheme '{scheme}'")

    assert url.path.startswith("/")

    path = os.path.relpath(url.path, "/")
    path = os.path.join(root, path)
    path = os.path.normpath(path)

    if url.path.endswith("/"):
        path = os.path.join(path, ".")

    return path


def main(args, devices, options):
    src = parse_location(options.get("from"), args)
    device = devices["device"]["path"]

    subprocess.run(["ls", "-l", "/run/osbuild/inputs/tree/boot/"], check=True)

    src_size = os.path.getsize(src)
    print(f"src_size: {src_size}")
    device_size = blksize(device)
    print(f"device_size: {device_size}")

    if src_size > device_size:
        raise ValueError(f"File to large for device")


    cmd = [ "dd", f"if={src}", f"of={device}"]
    print("Running {cmd}")
    subprocess.run(cmd, check=True)

    return 0

if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args, args["devices"], args["options"])
    sys.exit(r)
